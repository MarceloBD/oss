type Alternative implements Node {
  active: Boolean
  description: String
  justification: String
  letter: String

  # The ID of an object
  id: ID!
}

# A connection to a list of items.
type AlternativeConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [AlternativeEdge]
}

# An edge in a connection.
type AlternativeEdge {
  # The item at the end of the edge
  node: Alternative

  # A cursor for use in pagination
  cursor: String!
}

type Article implements Node {
  author: User
  body: String
  snippet: String
  title: String
  subject: Subject
  updatedAt: String

  # The ID of an object
  id: ID!
}

# A connection to a list of items.
type ArticleConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [ArticleEdge]
}

# An edge in a connection.
type ArticleEdge {
  # The item at the end of the edge
  node: Article

  # A cursor for use in pagination
  cursor: String!
}

type Auth {
  user: User
  hasStaffPermission: Boolean
}

type Banner implements Node {
  title: String
  description: String
  button: String
  link: String
  startDate: String
  endDate: String
  course: Course
  resource: Resource

  # The ID of an object
  id: ID!
}

# A connection to a list of items.
type BannerConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [BannerEdge]
}

# An edge in a connection.
type BannerEdge {
  # The item at the end of the edge
  node: Banner

  # A cursor for use in pagination
  cursor: String!
}

interface Class {
  id: ID!
  active: Boolean
  title: String
  video: Video
  repository: Repository
  resume: Resume
  notes(first: Int): NoteConnection
  allProgress: Progress
}

input ClosePostMutationInput {
  postId: String
  body: String
  clientMutationId: String
}

type ClosePostMutationPayload {
  clientMutationId: String
}

type Comment implements Node {
  author: User
  body: String
  likes: String
  zendeskId: String
  status: String
  createdAt: String
  official: Boolean

  # The ID of an object
  id: ID!
}

# A connection to a list of items.
type CommentConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [CommentEdge]
  count: Int
}

# An edge in a connection.
type CommentEdge {
  # The item at the end of the edge
  node: Comment

  # A cursor for use in pagination
  cursor: String!
}

type Course implements Node {
  active: Boolean
  banners(skip: Int, after: String, before: String, first: Int, last: Int): BannerConnection
  modules(skip: Int, after: String, before: String, first: Int, last: Int): ModuleConnection
  courseModules(skip: Int, after: String, before: String, first: Int, last: Int): CourseModuleConnection
  name: String
  description: String
  productId: String
  masterLessons: MasterLessonConnection
  topics: TopicConnection
  commonArticles: ArticleConnection
  articles(query: String, sections: [ID], sort_by: String, sort_order: String): ArticleConnection
  videosProgress: Progress
  resumesProgress: Progress
  questionnairesProgress: Progress
  masterLessonsProgress: Progress
  subjectsProgress: Progress
  allProgress: Progress
  areAllModulesFinished: Boolean
  posts(query: String, first: Int, after: ID): PostConnection

  # The ID of an object
  id: ID!
}

# A connection to a list of items.
type CourseConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [CourseEdge]
}

# An edge in a connection.
type CourseEdge {
  # The item at the end of the edge
  node: Course

  # A cursor for use in pagination
  cursor: String!
}

type CourseModule implements Node {
  availabilityDate: String
  order: Int
  course: Course
  module: Module
  courseSubjects: CourseSubjectConnection

  # The ID of an object
  id: ID!
}

# A connection to a list of items.
type CourseModuleConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [CourseModuleEdge]
}

# An edge in a connection.
type CourseModuleEdge {
  # The item at the end of the edge
  node: CourseModule

  # A cursor for use in pagination
  cursor: String!
}

type CourseSubject implements Node {
  topicId: String
  availabilityDate: String
  course: Course
  subject: Subject

  # The ID of an object
  id: ID!
}

# A connection to a list of items.
type CourseSubjectConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [CourseSubjectEdge]
}

# An edge in a connection.
type CourseSubjectEdge {
  # The item at the end of the edge
  node: CourseSubject

  # A cursor for use in pagination
  cursor: String!
}

input CreateAlternativeMutationInput {
  questionId: ID!
  description: String!
  justification: String
  clientMutationId: String
}

type CreateAlternativeMutationPayload {
  alternativeEdge: AlternativeEdge!
  clientMutationId: String
}

input CreateBannerMutationInput {
  courseId: ID!
  title: String
  description: String
  button: String
  link: String
  startDate: String
  endDate: String
  clientMutationId: String
}

type CreateBannerMutationPayload {
  banner: Banner!
  clientMutationId: String
}

input CreateCommentMutationInput {
  postId: ID!
  body: String!
  clientMutationId: String
}

type CreateCommentMutationPayload {
  comment: Comment!
  clientMutationId: String
}

input CreateCourseModuleMutationInput {
  courseId: ID!
  moduleId: ID!
  clientMutationId: String
}

type CreateCourseModuleMutationPayload {
  courseModuleEdge: CourseModuleEdge!
  clientMutationId: String
}

input CreateCourseMutationInput {
  name: String!
  productId: String
  clientMutationId: String
}

type CreateCourseMutationPayload {
  courseEdge: CourseEdge!
  clientMutationId: String
}

input CreateEvaluationMutationInput {
  moduleId: ID
  clientMutationId: String
}

type CreateEvaluationMutationPayload {
  exam: Exam
  clientMutationId: String
}

input CreateLessonIssueMutationInput {
  body: String!
  lessonId: ID!
  subject: String!
  clientMutationId: String
}

type CreateLessonIssueMutationPayload {
  clientMutationId: String
}

input CreateLessonMutationInput {
  subjectId: ID!
  professorId: ID!
  title: String!
  trial: Boolean!
  externalId: String!
  clientMutationId: String
}

type CreateLessonMutationPayload {
  lesson: Lesson!
  clientMutationId: String
}

input CreateMasterLessonIssueMutationInput {
  body: String!
  masterLessonId: ID!
  subject: String!
  clientMutationId: String
}

type CreateMasterLessonIssueMutationPayload {
  clientMutationId: String
}

input CreateMasterLessonMutationInput {
  externalId: String!
  moduleId: ID!
  speakerId: ID!
  trial: Boolean!
  title: String!
  clientMutationId: String
}

type CreateMasterLessonMutationPayload {
  masterLesson: MasterLesson!
  clientMutationId: String
}

input CreateMessageMutationInput {
  field: String
  body: String!
  subject: String!
  clientMutationId: String
}

type CreateMessageMutationPayload {
  message: Message!
  clientMutationId: String
}

input CreateModuleMutationInput {
  name: String!
  clientMutationId: String
}

type CreateModuleMutationPayload {
  moduleEdge: ModuleEdge!
  clientMutationId: String
}

input CreateNoteMasterLessonMutationInput {
  masterLessonId: ID
  text: String!
  clientMutationId: String
}

type CreateNoteMasterLessonMutationPayload {
  noteEdge: NoteEdge!
  clientMutationId: String
}

input CreateNoteMutationInput {
  lessonId: ID
  text: String!
  clientMutationId: String
}

type CreateNoteMutationPayload {
  noteEdge: NoteEdge!
  clientMutationId: String
}

input CreatePostCommentMutationInput {
  body: String
  postId: ID
  official: Boolean
  clientMutationId: String
}

type CreatePostCommentMutationPayload {
  postId: String
  commentId: String
  updatedAt: String
  postCommentEdge: CommentEdge!
  post: Post
  clientMutationId: String
}

input CreatePostMutationInput {
  topicId: ID!
  title: String!
  details: String!
  clientMutationId: String
}

type CreatePostMutationPayload {
  post: Post!
  clientMutationId: String
}

input CreatePresentationLessonMutationInput {
  subjectId: ID!
  professorId: ID!
  title: String!
  externalId: String!
  clientMutationId: String
}

type CreatePresentationLessonMutationPayload {
  presentationLesson: Lesson!
  clientMutationId: String
}

input CreateProfessorMutationInput {
  email: String!
  cpf: String!
  name: String!
  lastname: String!
  cellphone: String
  otherphone: String
  clientMutationId: String
}

type CreateProfessorMutationPayload {
  professor: Professor!
  clientMutationId: String
}

input CreateQuestionMutationInput {
  questionnaireId: ID
  description: String!
  clientMutationId: String
}

type CreateQuestionMutationPayload {
  questionEdge: QuestionEdge!
  clientMutationId: String
}

input CreateResourceMutationInput {
  repositoryId: ID
  name: String!
  key: String
  link: String!
  size: Int
  mimetype: String
  type: ResourceTypeEnum!
  clientMutationId: String
}

type CreateResourceMutationPayload {
  resourceEdge: ResourceEdge!
  clientMutationId: String
}

input CreateSpeakerMutationInput {
  name: String!
  description: String
  clientMutationId: String
}

type CreateSpeakerMutationPayload {
  speaker: Speaker!
  clientMutationId: String
}

input CreateSubjectMutationInput {
  moduleId: ID!
  name: String!
  clientMutationId: String
}

type CreateSubjectMutationPayload {
  subjectEdge: SubjectEdge!
  clientMutationId: String
}

input CreateTicketCommentMutationInput {
  body: String
  ticketId: ID
  clientMutationId: String
}

type CreateTicketCommentMutationPayload {
  ticketCommentEdge: TicketCommentEdge!
  updatedAt: String
  clientMutationId: String
}

input CreateTrialUserMutationInput {
  email: String!
  name: String!
  cellphone: String!
  cpf: String!
  lastname: String!
  productId: String!
  clientMutationId: String
}

type CreateTrialUserMutationPayload {
  clientMutationId: String
}

input DeleteAlternativeMutationInput {
  id: ID!
  clientMutationId: String
}

type DeleteAlternativeMutationPayload {
  alternative: Alternative!
  clientMutationId: String
}

input DeleteBannerMutationInput {
  id: ID!
  clientMutationId: String
}

type DeleteBannerMutationPayload {
  banner: Banner!
  clientMutationId: String
}

input DeleteCommentMutationInput {
  id: ID!
  postId: ID!
  clientMutationId: String
}

type DeleteCommentMutationPayload {
  comment: Comment
  clientMutationId: String
}

input DeleteCourseModuleMutationInput {
  courseId: ID!
  moduleId: ID!
  id: ID!
  clientMutationId: String
}

type DeleteCourseModuleMutationPayload {
  courseModule: CourseModule!
  clientMutationId: String
}

input DeleteCourseMutationInput {
  id: ID!
  clientMutationId: String
}

type DeleteCourseMutationPayload {
  course: Course!
  clientMutationId: String
}

input DeleteLessonMutationInput {
  id: ID!
  clientMutationId: String
}

type DeleteLessonMutationPayload {
  lesson: Lesson!
  clientMutationId: String
}

input DeleteMasterLessonMutationInput {
  id: ID!
  clientMutationId: String
}

type DeleteMasterLessonMutationPayload {
  masterLesson: MasterLesson!
  clientMutationId: String
}

input DeleteModuleMutationInput {
  id: ID!
  clientMutationId: String
}

type DeleteModuleMutationPayload {
  module: Module!
  clientMutationId: String
}

input DeleteNoteMutationInput {
  noteId: ID!
  lessonId: ID!
  clientMutationId: String
}

type DeleteNoteMutationPayload {
  clientMutationId: String
}

input DeletePostMutationInput {
  id: ID!
  clientMutationId: String
}

type DeletePostMutationPayload {
  post: Post!
  clientMutationId: String
}

input DeletePresentationLessonMutationInput {
  id: ID!
  subjectId: ID!
  clientMutationId: String
}

type DeletePresentationLessonMutationPayload {
  subject: Subject!
  clientMutationId: String
}

input DeleteProfessorMutationInput {
  id: ID!
  clientMutationId: String
}

type DeleteProfessorMutationPayload {
  professor: Professor!
  clientMutationId: String
}

input DeleteQuestionMutationInput {
  id: ID!
  clientMutationId: String
}

type DeleteQuestionMutationPayload {
  question: Question!
  clientMutationId: String
}

input DeleteResourceMutationInput {
  id: ID!
  clientMutationId: String
}

type DeleteResourceMutationPayload {
  resource: Resource!
  clientMutationId: String
}

input DeleteSpeakerMutationInput {
  id: ID!
  clientMutationId: String
}

type DeleteSpeakerMutationPayload {
  speaker: Speaker!
  clientMutationId: String
}

input DeleteSubjectMutationInput {
  id: ID!
  moduleId: ID!
  clientMutationId: String
}

type DeleteSubjectMutationPayload {
  subject: Subject!
  clientMutationId: String
}

input DesimpersonateMutationInput {
  clientMutationId: String
}

type DesimpersonateMutationPayload {
  jwtToken: String!
  clientMutationId: String
}

type Enrollment implements Node {
  active: Boolean
  course: Course
  lastAccess: String
  start: String
  end: String
  purchaseToken: String
  hasPayment: Boolean
  trialPeriodEnded: Boolean
  endTrial: String
  currentModule: Module

  # The ID of an object
  id: ID!
}

# A connection to a list of items.
type EnrollmentConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [EnrollmentEdge]
}

# An edge in a connection.
type EnrollmentEdge {
  # The item at the end of the edge
  node: Enrollment

  # A cursor for use in pagination
  cursor: String!
}

type Exam implements Node {
  active: Boolean
  description: String
  questionnaire: Questionnaire
  module: Module
  user: User
  questions: QuestionConnection
  endTime: String
  duration: Int
  grade: Grade
  isActive: Boolean
  hasBeenApproved: Boolean
  type: String
  createdAt: String

  # The ID of an object
  id: ID!
}

input GetResourceMutationInput {
  resourceId: ID
  download: Boolean
  s3Options: S3OptionsInput
  clientMutationId: String
}

type GetResourceMutationPayload {
  link: String
  clientMutationId: String
}

type Grade {
  correct: Int
  total: Int
  percentage: Float
  answeredQuestions: Int
}

input ImpersonateMutationInput {
  userId: ID!
  clientMutationId: String
}

type ImpersonateMutationPayload {
  jwtToken: String!
  clientMutationId: String
}

type Issue implements Ticket & Node {
  title: String
  type: String
  description: String
  lesson: Lesson
  masterLesson: MasterLesson
  comments(skip: Int, after: String, before: String, first: Int, last: Int): TicketCommentConnection
  updatedAt: String
  read: Boolean

  # The ID of an object
  id: ID!
}

type Lesson implements Class & Node {
  active: Boolean
  title: String
  number: String
  professor: Professor
  questionnaire: Questionnaire
  repository: Repository
  resume: Resume
  video: Video
  trial: Boolean
  subject: Subject
  notes(first: Int): NoteConnection
  videoProgress: Progress
  resumeProgress: Progress
  questionnaireProgress: Progress
  questionsProgress: Progress
  allProgress: Progress

  # The ID of an object
  id: ID!
}

# A connection to a list of items.
type LessonConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [LessonEdge]
}

# An edge in a connection.
type LessonEdge {
  # The item at the end of the edge
  node: Lesson

  # A cursor for use in pagination
  cursor: String!
}

input LoginMutationInput {
  email: String!
  password: String!
  clientMutationId: String
}

type LoginMutationPayload {
  jwtToken: String!
  user: User
  clientMutationId: String
}

input LoginTokenMutationInput {
  token: String!
  clientMutationId: String
}

type LoginTokenMutationPayload {
  jwtToken: String!
  user: User!
  clientMutationId: String
}

input LogoutMutationInput {
  clientMutationId: String
}

type LogoutMutationPayload {
  clientMutationId: String
}

type MasterLesson implements Class & Node {
  active: Boolean
  module: Module
  repository: Repository
  resume: Resume
  speaker: Speaker
  title: String
  video: Video
  notes(first: Int): NoteConnection
  trial: Boolean
  allProgress: Progress

  # The ID of an object
  id: ID!
}

# A connection to a list of items.
type MasterLessonConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [MasterLessonEdge]
}

# An edge in a connection.
type MasterLessonEdge {
  # The item at the end of the edge
  node: MasterLesson

  # A cursor for use in pagination
  cursor: String!
}

type Message implements Ticket & Node {
  title: String
  type: String
  description: String
  comments(skip: Int, after: String, before: String, first: Int, last: Int): TicketCommentConnection
  updatedAt: String
  read: Boolean

  # The ID of an object
  id: ID!
}

type Module implements Node {
  active: Boolean
  exam(type: String): Exam
  isExamReady: Boolean
  isNextExamAvailable: Boolean
  masterLessons(skip: Int, after: String, before: String, first: Int, last: Int): MasterLessonConnection
  name: String
  number: String
  type: String
  subjects(skip: Int, after: String, before: String, first: Int, last: Int, available: Boolean = true): SubjectConnection
  subjectsProgress: Progress
  videosProgress: Progress
  resumesProgress: Progress
  questionsGrade: Grade
  questionnairesProgress: Progress
  masterLessonsProgress: Progress
  allProgress: Progress
  workloadProgress: Progress
  forumsProgress: Progress
  examGrade: Grade
  quizProgress: Progress
  canUnlockModule: Boolean
  isUnlocked: Boolean
  isExamUnlocked: Boolean

  # The ID of an object
  id: ID!
}

# A connection to a list of items.
type ModuleConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [ModuleEdge]
}

# An edge in a connection.
type ModuleEdge {
  # The item at the end of the edge
  node: Module

  # A cursor for use in pagination
  cursor: String!
}

type Mutation {
  createAlternative(input: CreateAlternativeMutationInput!): CreateAlternativeMutationPayload
  deleteAlternative(input: DeleteAlternativeMutationInput!): DeleteAlternativeMutationPayload
  updateAlternative(input: UpdateAlternativeMutationInput!): UpdateAlternativeMutationPayload
  login(input: LoginMutationInput!): LoginMutationPayload
  loginToken(input: LoginTokenMutationInput!): LoginTokenMutationPayload
  logout(input: LogoutMutationInput!): LogoutMutationPayload
  recoverPassword(input: RecoverPasswordMutationInput!): RecoverPasswordMutationPayload
  resetPassword(input: ResetPasswordMutationInput!): ResetPasswordMutationPayload
  zendeskClientAuthorizationToken(input: ZendeskClientAuthorizationTokenMutationInput!): ZendeskClientAuthorizationTokenMutationPayload
  updateAuthor(input: UpdateAuthorMutationInput!): UpdateAuthorMutationPayload
  createBanner(input: CreateBannerMutationInput!): CreateBannerMutationPayload
  deleteBanner(input: DeleteBannerMutationInput!): DeleteBannerMutationPayload
  updateBanner(input: UpdateBannerMutationInput!): UpdateBannerMutationPayload
  createComment(input: CreateCommentMutationInput!): CreateCommentMutationPayload
  createPostComment(input: CreatePostCommentMutationInput!): CreatePostCommentMutationPayload
  deleteComment(input: DeleteCommentMutationInput!): DeleteCommentMutationPayload
  sendCommentCreated(input: SendCommentCreatedMutationInput!): SendCommentCreatedMutationPayload
  sendCommentDeletedStatus(input: SendCommentDeletedStatusMutationInput!): SendCommentDeletedStatusMutationPayload
  sendCommentStatus(input: SendCommentStatusMutationInput!): SendCommentStatusMutationPayload
  upVoteComment(input: UpVoteCommentMutationInput!): UpVoteCommentMutationPayload
  updateComment(input: UpdateCommentMutationInput!): UpdateCommentMutationPayload
  createCourseModule(input: CreateCourseModuleMutationInput!): CreateCourseModuleMutationPayload
  createCourse(input: CreateCourseMutationInput!): CreateCourseMutationPayload
  deleteCourseModule(input: DeleteCourseModuleMutationInput!): DeleteCourseModuleMutationPayload
  deleteCourse(input: DeleteCourseMutationInput!): DeleteCourseMutationPayload
  sendCourseAccessed(input: SendCourseAccessedMutationInput!): SendCourseAccessedMutationPayload
  sendCourseLeft(input: SendCourseLeftMutationInput!): SendCourseLeftMutationPayload
  updateCourseModulesOrder(input: UpdateCourseModulesOrderMutationInput!): UpdateCourseModulesOrderMutationPayload
  updateCourse(input: UpdateCourseMutationInput!): UpdateCourseMutationPayload
  updateCourseModule(input: UpdateCourseModuleMutationInput!): UpdateCourseModuleMutationPayload
  updateCourseSubject(input: UpdateCourseSubjectMutationInput!): UpdateCourseSubjectMutationPayload

  # Records the last enrollment accessed by the user
  updateLastAccess(input: UpdateLastAccessMutationInput!): UpdateLastAccessMutationPayload
  createEvaluation(input: CreateEvaluationMutationInput!): CreateEvaluationMutationPayload
  sendEvaluationBoardAccessed(input: SendEvaluationBoardAccessedMutationInput!): SendEvaluationBoardAccessedMutationPayload
  sendEvaluationBoardLeft(input: SendEvaluationBoardLeftMutationInput!): SendEvaluationBoardLeftMutationPayload
  sendEvaluationFinished(input: SendEvaluationFinishedMutationInput!): SendEvaluationFinishedMutationPayload
  sendEvaluationQuestionAccessed(input: SendEvaluationQuestionAccessedMutationInput!): SendEvaluationQuestionAccessedMutationPayload
  sendEvaluationQuestionLeft(input: SendEvaluationQuestionLeftMutationInput!): SendEvaluationQuestionLeftMutationPayload
  sendEvaluationStarted(input: SendEvaluationStartedMutationInput!): SendEvaluationStartedMutationPayload
  sendFaqAccessed(input: SendFaqAccessedMutationInput!): SendFaqAccessedMutationPayload
  sendFaqArticleAccessed(input: SendFaqArticleAccessedMutationInput!): SendFaqArticleAccessedMutationPayload
  sendFaqArticleLeft(input: SendFaqArticleLeftMutationInput!): SendFaqArticleLeftMutationPayload
  sendFaqLeft(input: SendFaqLeftMutationInput!): SendFaqLeftMutationPayload
  sendForumAccessed(input: SendForumAccessedMutationInput!): SendForumAccessedMutationPayload
  sendForumLeft(input: SendForumLeftMutationInput!): SendForumLeftMutationPayload
  desimpersonate(input: DesimpersonateMutationInput!): DesimpersonateMutationPayload
  impersonate(input: ImpersonateMutationInput!): ImpersonateMutationPayload
  createLessonIssue(input: CreateLessonIssueMutationInput!): CreateLessonIssueMutationPayload
  createMasterLessonIssue(input: CreateMasterLessonIssueMutationInput!): CreateMasterLessonIssueMutationPayload
  createLesson(input: CreateLessonMutationInput!): CreateLessonMutationPayload
  deleteLesson(input: DeleteLessonMutationInput!): DeleteLessonMutationPayload
  sendLessonAccessed(input: SendLessonAccessedMutationInput!): SendLessonAccessedMutationPayload
  sendLessonLeft(input: SendLessonLeftMutationInput!): SendLessonLeftMutationPayload
  updateLesson(input: UpdateLessonMutationInput!): UpdateLessonMutationPayload
  updateLessonTrialFlag(input: UpdateLessonTrialFlagMutationInput!): UpdateLessonTrialFlagMutationPayload
  createMasterLesson(input: CreateMasterLessonMutationInput!): CreateMasterLessonMutationPayload
  deleteMasterLesson(input: DeleteMasterLessonMutationInput!): DeleteMasterLessonMutationPayload
  sendMasterLessonAccessed(input: SendMasterLessonAccessedMutationInput!): SendMasterLessonAccessedMutationPayload
  sendMasterLessonLeft(input: SendMasterLessonLeftMutationInput!): SendMasterLessonLeftMutationPayload
  updateMasterLesson(input: UpdateMasterLessonMutationInput!): UpdateMasterLessonMutationPayload
  updateMasterLessonTrialFlag(input: UpdateMasterLessonTrialFlagMutationInput!): UpdateMasterLessonTrialFlagMutationPayload
  createMessage(input: CreateMessageMutationInput!): CreateMessageMutationPayload
  sendMessageAccessed(input: SendMessageAccessedMutationInput!): SendMessageAccessedMutationPayload
  sendMessageBoardAccessed(input: SendMessageBoardAccessedMutationInput!): SendMessageBoardAccessedMutationPayload
  sendMessageBoardLeft(input: SendMessageBoardLeftMutationInput!): SendMessageBoardLeftMutationPayload
  sendMessageQuerySearched(input: SendMessageQuerySearchedMutationInput!): SendMessageQuerySearchedMutationPayload
  sendMessageSent(input: SendMessageSentMutationInput!): SendMessageSentMutationPayload
  createModule(input: CreateModuleMutationInput!): CreateModuleMutationPayload
  deleteModule(input: DeleteModuleMutationInput!): DeleteModuleMutationPayload
  unlockModule(input: UnlockModuleMutationInput!): UnlockModuleMutationPayload
  updateModule(input: UpdateModuleMutationInput!): UpdateModuleMutationPayload
  updateSubjectsOrder(input: UpdateSubjectsOrderMutationInput!): UpdateSubjectsOrderMutationPayload
  createNoteMasterLesson(input: CreateNoteMasterLessonMutationInput!): CreateNoteMasterLessonMutationPayload
  createNote(input: CreateNoteMutationInput!): CreateNoteMutationPayload
  deleteNote(input: DeleteNoteMutationInput!): DeleteNoteMutationPayload
  updateNote(input: UpdateNoteMutationInput!): UpdateNoteMutationPayload
  closePost(input: ClosePostMutationInput!): ClosePostMutationPayload
  createPost(input: CreatePostMutationInput!): CreatePostMutationPayload
  deletePost(input: DeletePostMutationInput!): DeletePostMutationPayload
  sendPostAccessed(input: SendPostAccessedMutationInput!): SendPostAccessedMutationPayload
  sendPostCreated(input: SendPostCreatedMutationInput!): SendPostCreatedMutationPayload
  sendPostLeft(input: SendPostLeftMutationInput!): SendPostLeftMutationPayload
  upVotePost(input: UpVotePostMutationInput!): UpVotePostMutationPayload
  updatePost(input: UpdatePostMutationInput!): UpdatePostMutationPayload
  createPresentationLesson(input: CreatePresentationLessonMutationInput!): CreatePresentationLessonMutationPayload
  deletePresentationLesson(input: DeletePresentationLessonMutationInput!): DeletePresentationLessonMutationPayload
  sendPresentationLessonAccessed(input: SendPresentationLessonAccessedMutationInput!): SendPresentationLessonAccessedMutationPayload
  sendPresentationLessonLeft(input: SendPresentationLessonLeftMutationInput!): SendPresentationLessonLeftMutationPayload
  updatePresentationLesson(input: UpdatePresentationLessonMutationInput!): UpdatePresentationLessonMutationPayload
  createProfessor(input: CreateProfessorMutationInput!): CreateProfessorMutationPayload
  deleteProfessor(input: DeleteProfessorMutationInput!): DeleteProfessorMutationPayload
  updateProfessor(input: UpdateProfessorMutationInput!): UpdateProfessorMutationPayload
  createQuestion(input: CreateQuestionMutationInput!): CreateQuestionMutationPayload
  deleteQuestion(input: DeleteQuestionMutationInput!): DeleteQuestionMutationPayload
  sendEvaluationQuestionChosenAlternative(input: SendEvaluationQuestionChosenAlternativeMutationInput!): SendEvaluationQuestionChosenAlternativeMutationPayload
  sendQuestionAnswer(input: SendQuestionAnswerMutationInput!): SendQuestionAnswerMutationPayload
  sendQuestionChoseAlternative(input: SendQuestionChoseAlternativeMutationInput!): SendQuestionChoseAlternativeMutationPayload
  sendQuestionLeft(input: SendQuestionLeftMutationInput!): SendQuestionLeftMutationPayload
  sendQuestionOpened(input: SendQuestionOpenedMutationInput!): SendQuestionOpenedMutationPayload
  updateAlternativesOrder(input: UpdateAlternativesOrderMutationInput!): UpdateAlternativesOrderMutationPayload
  updateQuestionCorrectAlternative(input: UpdateQuestionCorrectAlternativeMutationInput!): UpdateQuestionCorrectAlternativeMutationPayload
  updateQuestion(input: UpdateQuestionMutationInput!): UpdateQuestionMutationPayload
  questionnaire(input: QuestionnaireMutationInput!): QuestionnaireMutationPayload
  sendQuestionnaireClosed(input: SendQuestionnaireClosedMutationInput!): SendQuestionnaireClosedMutationPayload
  sendQuestionnaireFinished(input: SendQuestionnaireFinishedMutationInput!): SendQuestionnaireFinishedMutationPayload
  sendQuestionnaireOpened(input: SendQuestionnaireOpenedMutationInput!): SendQuestionnaireOpenedMutationPayload
  updateQuestionsOrder(input: UpdateQuestionsOrderMutationInput!): UpdateQuestionsOrderMutationPayload
  createResource(input: CreateResourceMutationInput!): CreateResourceMutationPayload
  deleteResource(input: DeleteResourceMutationInput!): DeleteResourceMutationPayload
  getResource(input: GetResourceMutationInput!): GetResourceMutationPayload
  updateResource(input: UpdateResourceMutationInput!): UpdateResourceMutationPayload
  sendMasterLessonResumeFinished(input: SendMasterLessonResumeFinishedMutationInput!): SendMasterLessonResumeFinishedMutationPayload
  sendMasterLessonResumeReadSection(input: SendMasterLessonResumeReadSectionMutationInput!): SendMasterLessonResumeReadSectionMutationPayload
  sendMasterLessonResumeReadingStarted(input: SendMasterLessonResumeReadingStartedMutationInput!): SendMasterLessonResumeReadingStartedMutationPayload
  sendPresentationLessonResumeFinished(input: SendPresentationLessonResumeFinishedMutationInput!): SendPresentationLessonResumeFinishedMutationPayload
  sendPresentationLessonResumeReadSection(input: SendPresentationLessonResumeReadSectionMutationInput!): SendPresentationLessonResumeReadSectionMutationPayload
  sendPresentationLessonResumeReadingStarted(input: SendPresentationLessonResumeReadingStartedMutationInput!): SendPresentationLessonResumeReadingStartedMutationPayload
  sendResumeFinished(input: SendResumeFinishedMutationInput!): SendResumeFinishedMutationPayload
  sendResumeReadSection(input: SendResumeReadSectionMutationInput!): SendResumeReadSectionMutationPayload
  sendResumeReadingStarted(input: SendResumeReadingStartedMutationInput!): SendResumeReadingStartedMutationPayload
  updateResume(input: UpdateResumeMutationInput!): UpdateResumeMutationPayload
  s3GetObject(input: S3GetObjectMutationInput!): S3GetObjectMutationPayload
  s3PutObject(input: S3PutObjectMutationInput!): S3PutObjectMutationPayload
  createSpeaker(input: CreateSpeakerMutationInput!): CreateSpeakerMutationPayload
  deleteSpeaker(input: DeleteSpeakerMutationInput!): DeleteSpeakerMutationPayload
  updateSpeaker(input: UpdateSpeakerMutationInput!): UpdateSpeakerMutationPayload
  createSubject(input: CreateSubjectMutationInput!): CreateSubjectMutationPayload
  deleteSubject(input: DeleteSubjectMutationInput!): DeleteSubjectMutationPayload
  sendSubjectAccessed(input: SendSubjectAccessedMutationInput!): SendSubjectAccessedMutationPayload
  sendSubjectLeft(input: SendSubjectLeftMutationInput!): SendSubjectLeftMutationPayload
  updateLessonsOrder(input: UpdateLessonsOrderMutationInput!): UpdateLessonsOrderMutationPayload
  updateSubject(input: UpdateSubjectMutationInput!): UpdateSubjectMutationPayload
  setTicketRead(input: SetTicketReadMutationInput!): SetTicketReadMutationPayload
  createTicketComment(input: CreateTicketCommentMutationInput!): CreateTicketCommentMutationPayload
  createTrialUser(input: CreateTrialUserMutationInput!): CreateTrialUserMutationPayload
  sendMasterLessonVideoFinished(input: SendMasterLessonVideoFinishedMutationInput!): SendMasterLessonVideoFinishedMutationPayload
  sendMasterLessonVideoLoaded(input: SendMasterLessonVideoLoadedMutationInput!): SendMasterLessonVideoLoadedMutationPayload
  sendMasterLessonVideoPaused(input: SendMasterLessonVideoPausedMutationInput!): SendMasterLessonVideoPausedMutationPayload
  sendMasterLessonVideoResumed(input: SendMasterLessonVideoResumedMutationInput!): SendMasterLessonVideoResumedMutationPayload
  sendMasterLessonVideoSeeked(input: SendMasterLessonVideoSeekedMutationInput!): SendMasterLessonVideoSeekedMutationPayload
  sendMasterLessonVideoStarted(input: SendMasterLessonVideoStartedMutationInput!): SendMasterLessonVideoStartedMutationPayload
  sendMasterLessonVideoWatchedPoint(input: SendMasterLessonVideoWatchedPointMutationInput!): SendMasterLessonVideoWatchedPointMutationPayload
  sendPresentationLessonVideoFinished(input: SendPresentationLessonVideoFinishedMutationInput!): SendPresentationLessonVideoFinishedMutationPayload
  sendPresentationLessonVideoLoaded(input: SendPresentationLessonVideoLoadedMutationInput!): SendPresentationLessonVideoLoadedMutationPayload
  sendPresentationLessonVideoPaused(input: SendPresentationLessonVideoPausedMutationInput!): SendPresentationLessonVideoPausedMutationPayload
  sendPresentationLessonVideoResumed(input: SendPresentationLessonVideoResumedMutationInput!): SendPresentationLessonVideoResumedMutationPayload
  sendPresentationLessonVideoSeeked(input: SendPresentationLessonVideoSeekedMutationInput!): SendPresentationLessonVideoSeekedMutationPayload
  sendPresentationLessonVideoStarted(input: SendPresentationLessonVideoStartedMutationInput!): SendPresentationLessonVideoStartedMutationPayload
  sendPresentationLessonVideoWatchedPoint(input: SendPresentationLessonVideoWatchedPointMutationInput!): SendPresentationLessonVideoWatchedPointMutationPayload
  sendVideoFinished(input: SendVideoFinishedMutationInput!): SendVideoFinishedMutationPayload
  sendVideoLoaded(input: SendVideoLoadedMutationInput!): SendVideoLoadedMutationPayload
  sendVideoPaused(input: SendVideoPausedMutationInput!): SendVideoPausedMutationPayload
  sendVideoResumed(input: SendVideoResumedMutationInput!): SendVideoResumedMutationPayload
  sendVideoSeeked(input: SendVideoSeekedMutationInput!): SendVideoSeekedMutationPayload
  sendVideoStarted(input: SendVideoStartedMutationInput!): SendVideoStartedMutationPayload
  sendVideoWatchedPoint(input: SendVideoWatchedPointMutationInput!): SendVideoWatchedPointMutationPayload
}

# An object with an ID
interface Node {
  # The id of the object.
  id: ID!
}

type Note implements Node {
  active: Boolean
  text: String
  lesson: Lesson
  createdAt: String
  updatedAt: String

  # The ID of an object
  id: ID!
}

# A connection to a list of items.
type NoteConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [NoteEdge]
}

# An edge in a connection.
type NoteEdge {
  # The item at the end of the edge
  node: Note

  # A cursor for use in pagination
  cursor: String!
}

# Information about pagination in a connection.
type PageInfo {
  # When paginating forwards, are there more items?
  hasNextPage: Boolean!

  # When paginating backwards, are there more items?
  hasPreviousPage: Boolean!

  # When paginating backwards, the cursor to continue.
  startCursor: String

  # When paginating forwards, the cursor to continue.
  endCursor: String
}

type Post implements Node {
  author: User
  comments(page: Int, first: Int): CommentConnection
  details: String
  title: String
  url: String
  updatedAt: String
  date: String
  topic: Subject
  subject: Subject
  likes: String
  zendeskId: String
  createdAt: String
  closed: Boolean

  # The ID of an object
  id: ID!
}

# A connection to a list of items.
type PostConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [PostEdge]
  count: Int
}

# An edge in a connection.
type PostEdge {
  # The item at the end of the edge
  node: Post

  # A cursor for use in pagination
  cursor: String!
}

type Professor implements Node {
  active: Boolean
  user: User
  description: String
  occupation: String

  # The ID of an object
  id: ID!
}

# A connection to a list of items.
type ProfessorConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [ProfessorEdge]
}

# An edge in a connection.
type ProfessorEdge {
  # The item at the end of the edge
  node: Professor

  # A cursor for use in pagination
  cursor: String!
}

type Progress {
  completed: Int
  percentage: Float
  started: Int
  consumed: Int
  total: Int
  error: Int
}

type Query {
  auth: Auth
  viewer: User

  # Fetches an object given its ID
  node(
    # The ID of an object
    id: ID!
  ): Node
  system: System
}

type Question implements Node {
  active: Boolean
  alternatives(skip: Int, after: String, before: String, first: Int, last: Int): AlternativeConnection
  description: String
  correctAlternative: Alternative
  isCorrect: Boolean
  answeredAlternative: Alternative
  hasQuestionBeenAnswered: Boolean
  isQuestionAnswerCorrect: Boolean

  # The ID of an object
  id: ID!
}

# A connection to a list of items.
type QuestionConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [QuestionEdge]
}

# An edge in a connection.
type QuestionEdge {
  # The item at the end of the edge
  node: Question

  # A cursor for use in pagination
  cursor: String!
}

type Questionnaire implements Node {
  active: Boolean
  questions(skip: Int, after: String, before: String, first: Int, last: Int): QuestionConnection

  # The ID of an object
  id: ID!
}

input QuestionnaireMutationInput {
  questionId: ID!
  alternativeId: ID!
  clientMutationId: String
}

type QuestionnaireMutationPayload {
  question: Question
  clientMutationId: String
}

input RecoverPasswordMutationInput {
  email: String!
  clientMutationId: String
}

type RecoverPasswordMutationPayload {
  clientMutationId: String
}

type Repository implements Node {
  active: Boolean
  resources(skip: Int, after: String, before: String, first: Int, last: Int): ResourceConnection

  # The ID of an object
  id: ID!
}

input ResetPasswordMutationInput {
  token: String!
  password: String!
  clientMutationId: String
}

type ResetPasswordMutationPayload {
  jwtToken: String!
  user: User!
  clientMutationId: String
}

type Resource implements Node {
  active: Boolean
  link: String
  key: String
  name: String
  type: String
  mimetype: String
  size: String
  date: String
  createdAt: String

  # The ID of an object
  id: ID!
}

# A connection to a list of items.
type ResourceConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [ResourceEdge]
}

# An edge in a connection.
type ResourceEdge {
  # The item at the end of the edge
  node: Resource

  # A cursor for use in pagination
  cursor: String!
}

enum ResourceTypeEnum {
  S3
  LINK
}

type Resume implements Node {
  active: Boolean
  title: String
  raw: String
  date: String
  percentage: Float
  updatedAt: String

  # The ID of an object
  id: ID!
}

input S3GetObjectMutationInput {
  resourceId: ID
  download: Boolean
  s3Options: S3OptionsInput
  clientMutationId: String
}

type S3GetObjectMutationPayload {
  signedUrl: String
  clientMutationId: String
}

input S3OptionsInput {
  bucket: String
  region: String
  signatureVersion: String
  ACL: String
}

input S3PutObjectMutationInput {
  name: String!
  type: String!
  folder: String
  s3Options: S3OptionsInput
  clientMutationId: String
}

type S3PutObjectMutationPayload {
  resource: Resource
  signedUrl: String
  filename: String
  path: String
  clientMutationId: String
}

input SendCommentCreatedMutationInput {
  globalPostId: String
  commentId: String
  globalSubjectId: ID
  clientMutationId: String
}

type SendCommentCreatedMutationPayload {
  clientMutationId: String
}

input SendCommentDeletedStatusMutationInput {
  postId: ID
  zendeskCommentId: String
  commentId: ID
  deleted: Boolean
  clientMutationId: String
}

type SendCommentDeletedStatusMutationPayload {
  comment: Comment
  clientMutationId: String
}

input SendCommentStatusMutationInput {
  postId: ID
  zendeskCommentId: String
  commentId: ID
  status: String
  clientMutationId: String
}

type SendCommentStatusMutationPayload {
  comment: Comment
  clientMutationId: String
}

input SendCourseAccessedMutationInput {
  courseId: ID
  enrollmentId: ID
  clientMutationId: String
}

type SendCourseAccessedMutationPayload {
  clientMutationId: String
}

input SendCourseLeftMutationInput {
  courseId: ID
  enrollmentId: ID
  clientMutationId: String
}

type SendCourseLeftMutationPayload {
  clientMutationId: String
}

input SendEvaluationBoardAccessedMutationInput {
  courseId: ID
  enrollmentId: ID
  clientMutationId: String
}

type SendEvaluationBoardAccessedMutationPayload {
  clientMutationId: String
}

input SendEvaluationBoardLeftMutationInput {
  courseId: ID
  enrollmentId: ID
  clientMutationId: String
}

type SendEvaluationBoardLeftMutationPayload {
  clientMutationId: String
}

input SendEvaluationFinishedMutationInput {
  examId: ID
  type: String
  clientMutationId: String
}

type SendEvaluationFinishedMutationPayload {
  clientMutationId: String
}

input SendEvaluationQuestionAccessedMutationInput {
  examId: ID
  questionId: ID
  clientMutationId: String
}

type SendEvaluationQuestionAccessedMutationPayload {
  clientMutationId: String
}

input SendEvaluationQuestionChosenAlternativeMutationInput {
  chosenAlternativeId: ID
  questionId: ID
  examId: ID
  clientMutationId: String
}

type SendEvaluationQuestionChosenAlternativeMutationPayload {
  question: Question
  clientMutationId: String
}

input SendEvaluationQuestionLeftMutationInput {
  examId: ID
  questionId: ID
  clientMutationId: String
}

type SendEvaluationQuestionLeftMutationPayload {
  clientMutationId: String
}

input SendEvaluationStartedMutationInput {
  examId: ID
  type: String
  createdAt: String
  clientMutationId: String
}

type SendEvaluationStartedMutationPayload {
  clientMutationId: String
}

input SendFaqAccessedMutationInput {
  clientMutationId: String
}

type SendFaqAccessedMutationPayload {
  clientMutationId: String
}

input SendFaqArticleAccessedMutationInput {
  id: ID
  subjectId: ID
  clientMutationId: String
}

type SendFaqArticleAccessedMutationPayload {
  clientMutationId: String
}

input SendFaqArticleLeftMutationInput {
  id: ID
  subjectId: ID
  clientMutationId: String
}

type SendFaqArticleLeftMutationPayload {
  clientMutationId: String
}

input SendFaqLeftMutationInput {
  clientMutationId: String
}

type SendFaqLeftMutationPayload {
  clientMutationId: String
}

input SendForumAccessedMutationInput {
  courseId: ID
  enrollmentId: ID
  clientMutationId: String
}

type SendForumAccessedMutationPayload {
  clientMutationId: String
}

input SendForumLeftMutationInput {
  courseId: ID
  enrollmentId: ID
  clientMutationId: String
}

type SendForumLeftMutationPayload {
  clientMutationId: String
}

input SendLessonAccessedMutationInput {
  lessonId: ID
  clientMutationId: String
}

type SendLessonAccessedMutationPayload {
  clientMutationId: String
}

input SendLessonLeftMutationInput {
  lessonId: ID
  clientMutationId: String
}

type SendLessonLeftMutationPayload {
  clientMutationId: String
}

input SendMasterLessonAccessedMutationInput {
  masterLessonId: ID
  clientMutationId: String
}

type SendMasterLessonAccessedMutationPayload {
  clientMutationId: String
}

input SendMasterLessonLeftMutationInput {
  masterLessonId: ID
  clientMutationId: String
}

type SendMasterLessonLeftMutationPayload {
  clientMutationId: String
}

input SendMasterLessonResumeFinishedMutationInput {
  masterLessonId: ID
  resumeId: ID
  percentage: Float
  clientMutationId: String
}

type SendMasterLessonResumeFinishedMutationPayload {
  clientMutationId: String
}

input SendMasterLessonResumeReadingStartedMutationInput {
  masterLessonId: ID
  resumeId: ID
  clientMutationId: String
}

type SendMasterLessonResumeReadingStartedMutationPayload {
  clientMutationId: String
}

input SendMasterLessonResumeReadSectionMutationInput {
  masterLessonId: ID
  resumeId: ID
  percentage: Float
  clientMutationId: String
}

type SendMasterLessonResumeReadSectionMutationPayload {
  clientMutationId: String
}

input SendMasterLessonVideoFinishedMutationInput {
  duration: Float
  time: Int
  masterLessonId: ID
  videoId: ID
  clientMutationId: String
}

type SendMasterLessonVideoFinishedMutationPayload {
  clientMutationId: String
}

input SendMasterLessonVideoLoadedMutationInput {
  masterLessonId: ID
  videoId: ID
  clientMutationId: String
}

type SendMasterLessonVideoLoadedMutationPayload {
  clientMutationId: String
}

input SendMasterLessonVideoPausedMutationInput {
  duration: Float
  time: Int
  masterLessonId: ID
  videoId: ID
  clientMutationId: String
}

type SendMasterLessonVideoPausedMutationPayload {
  clientMutationId: String
}

input SendMasterLessonVideoResumedMutationInput {
  duration: Float
  time: Int
  masterLessonId: ID
  videoId: ID
  clientMutationId: String
}

type SendMasterLessonVideoResumedMutationPayload {
  clientMutationId: String
}

input SendMasterLessonVideoSeekedMutationInput {
  duration: Float
  time: Int
  lastTime: Float
  masterLessonId: ID
  videoId: ID
  clientMutationId: String
}

type SendMasterLessonVideoSeekedMutationPayload {
  clientMutationId: String
}

input SendMasterLessonVideoStartedMutationInput {
  duration: Float
  time: Int
  masterLessonId: ID
  videoId: ID
  clientMutationId: String
}

type SendMasterLessonVideoStartedMutationPayload {
  clientMutationId: String
}

input SendMasterLessonVideoWatchedPointMutationInput {
  duration: Float
  time: Int
  masterLessonId: ID
  videoId: ID
  clientMutationId: String
}

type SendMasterLessonVideoWatchedPointMutationPayload {
  clientMutationId: String
}

input SendMessageAccessedMutationInput {
  id: ID
  clientMutationId: String
}

type SendMessageAccessedMutationPayload {
  clientMutationId: String
}

input SendMessageBoardAccessedMutationInput {
  clientMutationId: String
}

type SendMessageBoardAccessedMutationPayload {
  clientMutationId: String
}

input SendMessageBoardLeftMutationInput {
  clientMutationId: String
}

type SendMessageBoardLeftMutationPayload {
  clientMutationId: String
}

input SendMessageQuerySearchedMutationInput {
  query: String
  clientMutationId: String
}

type SendMessageQuerySearchedMutationPayload {
  clientMutationId: String
}

input SendMessageSentMutationInput {
  field: String
  clientMutationId: String
}

type SendMessageSentMutationPayload {
  clientMutationId: String
}

input SendPostAccessedMutationInput {
  postId: ID
  globalSubjectId: ID
  clientMutationId: String
}

type SendPostAccessedMutationPayload {
  clientMutationId: String
}

input SendPostCreatedMutationInput {
  postId: String
  globalSubjectId: ID
  clientMutationId: String
}

type SendPostCreatedMutationPayload {
  clientMutationId: String
}

input SendPostLeftMutationInput {
  postId: ID
  clientMutationId: String
}

type SendPostLeftMutationPayload {
  clientMutationId: String
}

input SendPresentationLessonAccessedMutationInput {
  presentationLessonId: ID
  clientMutationId: String
}

type SendPresentationLessonAccessedMutationPayload {
  clientMutationId: String
}

input SendPresentationLessonLeftMutationInput {
  presentationLessonId: ID
  clientMutationId: String
}

type SendPresentationLessonLeftMutationPayload {
  clientMutationId: String
}

input SendPresentationLessonResumeFinishedMutationInput {
  presentationLessonId: ID
  resumeId: ID
  percentage: Float
  clientMutationId: String
}

type SendPresentationLessonResumeFinishedMutationPayload {
  clientMutationId: String
}

input SendPresentationLessonResumeReadingStartedMutationInput {
  presentationLessonId: ID
  resumeId: ID
  clientMutationId: String
}

type SendPresentationLessonResumeReadingStartedMutationPayload {
  clientMutationId: String
}

input SendPresentationLessonResumeReadSectionMutationInput {
  presentationLessonId: ID
  resumeId: ID
  percentage: Float
  clientMutationId: String
}

type SendPresentationLessonResumeReadSectionMutationPayload {
  clientMutationId: String
}

input SendPresentationLessonVideoFinishedMutationInput {
  duration: Float
  time: Int
  presentationLessonId: ID
  videoId: ID
  clientMutationId: String
}

type SendPresentationLessonVideoFinishedMutationPayload {
  clientMutationId: String
}

input SendPresentationLessonVideoLoadedMutationInput {
  presentationLessonId: ID
  videoId: ID
  clientMutationId: String
}

type SendPresentationLessonVideoLoadedMutationPayload {
  clientMutationId: String
}

input SendPresentationLessonVideoPausedMutationInput {
  duration: Float
  time: Int
  presentationLessonId: ID
  videoId: ID
  clientMutationId: String
}

type SendPresentationLessonVideoPausedMutationPayload {
  clientMutationId: String
}

input SendPresentationLessonVideoResumedMutationInput {
  duration: Float
  time: Int
  presentationLessonId: ID
  videoId: ID
  clientMutationId: String
}

type SendPresentationLessonVideoResumedMutationPayload {
  clientMutationId: String
}

input SendPresentationLessonVideoSeekedMutationInput {
  duration: Float
  time: Int
  lastTime: Float
  presentationLessonId: ID
  videoId: ID
  clientMutationId: String
}

type SendPresentationLessonVideoSeekedMutationPayload {
  clientMutationId: String
}

input SendPresentationLessonVideoStartedMutationInput {
  duration: Float
  time: Int
  presentationLessonId: ID
  videoId: ID
  clientMutationId: String
}

type SendPresentationLessonVideoStartedMutationPayload {
  clientMutationId: String
}

input SendPresentationLessonVideoWatchedPointMutationInput {
  duration: Float
  time: Int
  presentationLessonId: ID
  videoId: ID
  clientMutationId: String
}

type SendPresentationLessonVideoWatchedPointMutationPayload {
  clientMutationId: String
}

input SendQuestionAnswerMutationInput {
  choseAlternative: ID
  correctAlternative: ID
  questionnaireId: ID
  questionId: ID
  lessonId: ID
  clientMutationId: String
}

type SendQuestionAnswerMutationPayload {
  question: Question
  clientMutationId: String
}

input SendQuestionChoseAlternativeMutationInput {
  choseAlternative: ID
  correctAlternative: ID
  questionnaireId: ID
  questionId: ID
  lessonId: ID
  clientMutationId: String
}

type SendQuestionChoseAlternativeMutationPayload {
  clientMutationId: String
}

input SendQuestionLeftMutationInput {
  questionId: ID
  questionnaireId: ID
  lessonId: ID
  clientMutationId: String
}

type SendQuestionLeftMutationPayload {
  clientMutationId: String
}

input SendQuestionnaireClosedMutationInput {
  lessonId: ID
  questionnaireId: ID
  clientMutationId: String
}

type SendQuestionnaireClosedMutationPayload {
  clientMutationId: String
}

input SendQuestionnaireFinishedMutationInput {
  lessonId: ID
  questionnaireId: ID
  clientMutationId: String
}

type SendQuestionnaireFinishedMutationPayload {
  clientMutationId: String
}

input SendQuestionnaireOpenedMutationInput {
  lessonId: ID
  questionnaireId: ID
  clientMutationId: String
}

type SendQuestionnaireOpenedMutationPayload {
  clientMutationId: String
}

input SendQuestionOpenedMutationInput {
  questionId: ID
  questionnaireId: ID
  lessonId: ID
  clientMutationId: String
}

type SendQuestionOpenedMutationPayload {
  clientMutationId: String
}

input SendResumeFinishedMutationInput {
  lessonId: ID
  resumeId: ID
  percentage: Float
  clientMutationId: String
}

type SendResumeFinishedMutationPayload {
  clientMutationId: String
}

input SendResumeReadingStartedMutationInput {
  lessonId: ID
  resumeId: ID
  clientMutationId: String
}

type SendResumeReadingStartedMutationPayload {
  clientMutationId: String
}

input SendResumeReadSectionMutationInput {
  lessonId: ID
  resumeId: ID
  percentage: Float
  clientMutationId: String
}

type SendResumeReadSectionMutationPayload {
  clientMutationId: String
}

input SendSubjectAccessedMutationInput {
  subjectId: ID
  clientMutationId: String
}

type SendSubjectAccessedMutationPayload {
  clientMutationId: String
}

input SendSubjectLeftMutationInput {
  subjectId: ID
  clientMutationId: String
}

type SendSubjectLeftMutationPayload {
  clientMutationId: String
}

input SendVideoFinishedMutationInput {
  duration: Float
  time: Int
  lessonId: ID
  videoId: ID
  clientMutationId: String
}

type SendVideoFinishedMutationPayload {
  clientMutationId: String
}

input SendVideoLoadedMutationInput {
  lessonId: ID
  videoId: ID
  clientMutationId: String
}

type SendVideoLoadedMutationPayload {
  clientMutationId: String
}

input SendVideoPausedMutationInput {
  duration: Float
  time: Int
  lessonId: ID
  videoId: ID
  clientMutationId: String
}

type SendVideoPausedMutationPayload {
  clientMutationId: String
}

input SendVideoResumedMutationInput {
  duration: Float
  time: Int
  lessonId: ID
  videoId: ID
  clientMutationId: String
}

type SendVideoResumedMutationPayload {
  clientMutationId: String
}

input SendVideoSeekedMutationInput {
  duration: Float
  time: Int
  lastTime: Float
  lessonId: ID
  videoId: ID
  clientMutationId: String
}

type SendVideoSeekedMutationPayload {
  clientMutationId: String
}

input SendVideoStartedMutationInput {
  duration: Float
  time: Int
  lessonId: ID
  videoId: ID
  clientMutationId: String
}

type SendVideoStartedMutationPayload {
  clientMutationId: String
}

input SendVideoWatchedPointMutationInput {
  duration: Float
  time: Int
  lessonId: ID
  videoId: ID
  clientMutationId: String
}

type SendVideoWatchedPointMutationPayload {
  clientMutationId: String
}

input SetTicketReadMutationInput {
  ticketId: ID
  clientMutationId: String
}

type SetTicketReadMutationPayload {
  updatedAt: String
  clientMutationId: String
}

type Speaker implements Node {
  active: Boolean
  description: String
  name: String
  occupation: String
  avatar: Resource

  # The ID of an object
  id: ID!
}

# A connection to a list of items.
type SpeakerConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [SpeakerEdge]
}

# An edge in a connection.
type SpeakerEdge {
  # The item at the end of the edge
  node: Speaker

  # A cursor for use in pagination
  cursor: String!
}

type Staff implements Node {
  active: Boolean

  # The ID of an object
  id: ID!
}

type Student implements Node {
  active: Boolean
  user: User

  # The ID of an object
  id: ID!
}

# A connection to a list of items.
type StudentConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [StudentEdge]
}

# An edge in a connection.
type StudentEdge {
  # The item at the end of the edge
  node: Student

  # A cursor for use in pagination
  cursor: String!
}

type Subject implements Node {
  active: Boolean
  avatar: Resource
  lessons(skip: Int, after: String, before: String, first: Int, last: Int): LessonConnection
  presentationLesson: Lesson
  module: Module
  name: String
  description: String
  sectionId: String
  articles: ArticleConnection
  questionnaire: Questionnaire
  lessonsProgress: Progress
  videosProgress: Progress
  resumesProgress: Progress
  questionsProgress: Progress
  questionnairesProgress: Progress
  masterLessonsProgress: Progress
  allProgress: Progress
  questionsGrade: Grade
  posts(query: String, first: Int, after: ID): PostConnection
  topicId: String
  currentLesson: Lesson
  hasSubjectBegun: Boolean
  courseSubjects: CourseSubjectConnection
  available: Boolean

  # The ID of an object
  id: ID!
}

# A connection to a list of items.
type SubjectConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [SubjectEdge]
}

# An edge in a connection.
type SubjectEdge {
  # The item at the end of the edge
  node: Subject

  # A cursor for use in pagination
  cursor: String!
}

type System {
  courses(skip: Int, after: String, before: String, first: Int, last: Int): CourseConnection
  modules(skip: Int, after: String, before: String, first: Int, last: Int): ModuleConnection
  professors(skip: Int, after: String, before: String, first: Int, last: Int): ProfessorConnection
  speakers(skip: Int, after: String, before: String, first: Int, last: Int): SpeakerConnection
  users(skip: Int, after: String, before: String, first: Int, last: Int): UserConnection
  students(skip: Int, after: String, before: String, first: Int, last: Int): StudentConnection
}

interface Ticket {
  id: ID
  title: String
  type: String
  description: String
  comments(skip: Int, after: String, before: String, first: Int, last: Int): TicketCommentConnection
  updatedAt: String
  read: Boolean
}

type TicketComment implements Node {
  author: User
  body: String
  createdAt: String

  # The ID of an object
  id: ID!
}

# A connection to a list of items.
type TicketCommentConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [TicketCommentEdge]
}

# An edge in a connection.
type TicketCommentEdge {
  # The item at the end of the edge
  node: TicketComment

  # A cursor for use in pagination
  cursor: String!
}

# A connection to a list of items.
type TicketConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [TicketEdge]
  count: String
}

# An edge in a connection.
type TicketEdge {
  # The item at the end of the edge
  node: Ticket

  # A cursor for use in pagination
  cursor: String!
}

type Topic implements Node {
  url: String
  name: String
  description: String
  posts(query: String): PostConnection

  # The ID of an object
  id: ID!
}

# A connection to a list of items.
type TopicConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [TopicEdge]
}

# An edge in a connection.
type TopicEdge {
  # The item at the end of the edge
  node: Topic

  # A cursor for use in pagination
  cursor: String!
}

input UnlockModuleMutationInput {
  id: ID!
  clientMutationId: String
}

type UnlockModuleMutationPayload {
  course: Course!
  clientMutationId: String
}

input UpdateAlternativeMutationInput {
  id: ID!
  description: String!
  justification: String
  clientMutationId: String
}

type UpdateAlternativeMutationPayload {
  alternative: Alternative!
  clientMutationId: String
}

input UpdateAlternativesOrderMutationInput {
  ids: [ID]
  questionId: ID!
  clientMutationId: String
}

type UpdateAlternativesOrderMutationPayload {
  question: Question!
  clientMutationId: String
}

input UpdateAuthorMutationInput {
  id: ID!
  email: String!
  cpf: String!
  name: String!
  lastname: String!
  cellphone: String
  otherphone: String
  clientMutationId: String
}

type UpdateAuthorMutationPayload {
  user: User!
  clientMutationId: String
}

input UpdateBannerMutationInput {
  id: ID!
  title: String
  description: String
  button: String
  link: String
  startDate: String
  endDate: String
  clientMutationId: String
}

type UpdateBannerMutationPayload {
  banner: Banner!
  clientMutationId: String
}

input UpdateCommentMutationInput {
  id: ID!
  postId: ID!
  body: String!
  clientMutationId: String
}

type UpdateCommentMutationPayload {
  comment: Comment
  clientMutationId: String
}

input UpdateCourseModuleMutationInput {
  id: ID!
  availabilityDate: String!
  clientMutationId: String
}

type UpdateCourseModuleMutationPayload {
  courseModule: CourseModule!
  clientMutationId: String
}

input UpdateCourseModulesOrderMutationInput {
  ids: [ID]
  courseId: ID!
  clientMutationId: String
}

type UpdateCourseModulesOrderMutationPayload {
  course: Course!
  clientMutationId: String
}

input UpdateCourseMutationInput {
  id: ID!
  name: String!
  productId: String
  description: String!
  clientMutationId: String
}

type UpdateCourseMutationPayload {
  course: Course!
  clientMutationId: String
}

input UpdateCourseSubjectMutationInput {
  id: ID!
  topicId: String
  subjectId: ID
  availabilityDate: String
  clientMutationId: String
}

type UpdateCourseSubjectMutationPayload {
  courseSubject: CourseSubject!
  clientMutationId: String
}

input UpdateLastAccessMutationInput {
  id: ID
  clientMutationId: String
}

type UpdateLastAccessMutationPayload {
  enrollment: Enrollment
  clientMutationId: String
}

input UpdateLessonMutationInput {
  id: ID!
  professorId: ID!
  title: String!
  trial: Boolean!
  externalId: String!
  resume: String!
  clientMutationId: String
}

type UpdateLessonMutationPayload {
  lesson: Lesson!
  clientMutationId: String
}

input UpdateLessonsOrderMutationInput {
  ids: [ID]
  subjectId: ID!
  clientMutationId: String
}

type UpdateLessonsOrderMutationPayload {
  subject: Subject!
  clientMutationId: String
}

input UpdateLessonTrialFlagMutationInput {
  id: ID!
  trial: Boolean!
  clientMutationId: String
}

type UpdateLessonTrialFlagMutationPayload {
  lesson: Lesson!
  clientMutationId: String
}

input UpdateMasterLessonMutationInput {
  id: ID!
  externalId: String!
  speakerId: ID!
  title: String!
  trial: Boolean!
  resume: String!
  clientMutationId: String
}

type UpdateMasterLessonMutationPayload {
  masterLesson: MasterLesson!
  clientMutationId: String
}

input UpdateMasterLessonTrialFlagMutationInput {
  id: ID!
  trial: Boolean!
  clientMutationId: String
}

type UpdateMasterLessonTrialFlagMutationPayload {
  masterLesson: MasterLesson!
  clientMutationId: String
}

input UpdateModuleMutationInput {
  id: ID!
  name: String!
  clientMutationId: String
}

type UpdateModuleMutationPayload {
  module: Module!
  clientMutationId: String
}

input UpdateNoteMutationInput {
  noteId: ID!
  text: String!
  clientMutationId: String
}

type UpdateNoteMutationPayload {
  note: Note!
  clientMutationId: String
}

input UpdatePostMutationInput {
  id: ID!
  title: String
  details: String
  clientMutationId: String
}

type UpdatePostMutationPayload {
  post: Post!
  clientMutationId: String
}

input UpdatePresentationLessonMutationInput {
  id: ID!
  professorId: ID!
  title: String!
  externalId: String!
  resume: String!
  clientMutationId: String
}

type UpdatePresentationLessonMutationPayload {
  presentationLesson: Lesson!
  clientMutationId: String
}

input UpdateProfessorMutationInput {
  id: ID!
  description: String
  occupation: String
  clientMutationId: String
}

type UpdateProfessorMutationPayload {
  professor: Professor!
  clientMutationId: String
}

input UpdateQuestionCorrectAlternativeMutationInput {
  id: ID!
  correctAlternativeId: ID!
  clientMutationId: String
}

type UpdateQuestionCorrectAlternativeMutationPayload {
  question: Question!
  clientMutationId: String
}

input UpdateQuestionMutationInput {
  id: ID!
  description: String!
  clientMutationId: String
}

type UpdateQuestionMutationPayload {
  question: Question!
  clientMutationId: String
}

input UpdateQuestionsOrderMutationInput {
  ids: [ID]
  questionnaireId: ID!
  clientMutationId: String
}

type UpdateQuestionsOrderMutationPayload {
  questionnaire: Questionnaire!
  clientMutationId: String
}

input UpdateResourceMutationInput {
  id: ID!
  name: String!
  key: String
  link: String
  size: Int
  mimetype: String
  type: ResourceTypeEnum
  clientMutationId: String
}

type UpdateResourceMutationPayload {
  resource: Resource!
  clientMutationId: String
}

input UpdateResumeMutationInput {
  id: ID!
  raw: String
  clientMutationId: String
}

type UpdateResumeMutationPayload {
  resume: Resume!
  clientMutationId: String
}

input UpdateSpeakerMutationInput {
  id: ID!
  name: String!
  description: String
  occupation: String
  clientMutationId: String
}

type UpdateSpeakerMutationPayload {
  speaker: Speaker!
  clientMutationId: String
}

input UpdateSubjectMutationInput {
  id: ID!
  name: String!
  description: String
  sectionId: String
  clientMutationId: String
}

type UpdateSubjectMutationPayload {
  subject: Subject!
  clientMutationId: String
}

input UpdateSubjectsOrderMutationInput {
  ids: [ID]
  moduleId: ID!
  clientMutationId: String
}

type UpdateSubjectsOrderMutationPayload {
  module: Module!
  clientMutationId: String
}

input UpVoteCommentMutationInput {
  commentId: ID
  postId: ID
  clientMutationId: String
}

type UpVoteCommentMutationPayload {
  comment: Comment
  clientMutationId: String
}

input UpVotePostMutationInput {
  postId: ID
  voteSum: String
  clientMutationId: String
}

type UpVotePostMutationPayload {
  clientMutationId: String
}

type User implements Node {
  email: String
  cpf: String
  password: String
  name: String
  lastname: String
  cellphone: String
  otherphone: String
  fullname: String
  zendeskId: String
  professor: Professor
  staff: Staff
  student: Student
  enrollments(where: String, orderBy: String, skip: Int, after: String, before: String, first: Int, last: Int): EnrollmentConnection
  currentEnrollment: Enrollment
  avatar: Resource
  tickets(type: String, query: String): TicketConnection
  isImpersonated: Boolean

  # The ID of an object
  id: ID!
}

# A connection to a list of items.
type UserConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [UserEdge]
}

# An edge in a connection.
type UserEdge {
  # The item at the end of the edge
  node: User

  # A cursor for use in pagination
  cursor: String!
}

type Video implements Node {
  active: Boolean
  externalId: String
  duration: String
  thumb: String
  resume: Float

  # The ID of an object
  id: ID!
}

input ZendeskClientAuthorizationTokenMutationInput {
  clientMutationId: String
}

type ZendeskClientAuthorizationTokenMutationPayload {
  jwtToken: String
  clientMutationId: String
}
