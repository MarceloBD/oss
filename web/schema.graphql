type Auth {
  user: User
  hasStaffPermission: Boolean
}

type Constant implements Node {
  materialTypes: [String]
  domainTypes: [String]
  sourceTypes: [String]
  licenseTypes: [String]

  # The ID of an object
  id: ID!
}

input CreateNewPostMutationInput {
  title: String
  description: String
  language: String
  url: String
  type: String
  domain: String
  license: String
  licenseVersion: String
  source: String
  authors: [String]
  hash: String
  clientMutationId: String
}

type CreateNewPostMutationPayload {
  clientMutationId: String
}

type Enrollment implements Node {
  active: Boolean
  lastAccess: String
  start: String
  end: String
  purchaseToken: String
  hasPayment: Boolean
  trialPeriodEnded: Boolean
  endTrial: String

  # The ID of an object
  id: ID!
}

# A connection to a list of items.
type EnrollmentConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [EnrollmentEdge]
}

# An edge in a connection.
type EnrollmentEdge {
  # The item at the end of the edge
  node: Enrollment

  # A cursor for use in pagination
  cursor: String!
}

type License implements Node {
  name: String
  version: String

  # The ID of an object
  id: ID!
}

input LoginMutationInput {
  email: String!
  password: String!
  clientMutationId: String
}

type LoginMutationPayload {
  jwtToken: String!
  user: User
  clientMutationId: String
}

input LoginTokenMutationInput {
  token: String!
  clientMutationId: String
}

type LoginTokenMutationPayload {
  jwtToken: String!
  user: User!
  clientMutationId: String
}

input LogoutMutationInput {
  clientMutationId: String
}

type LogoutMutationPayload {
  clientMutationId: String
}

type Material implements Node {
  name: String
  type: String
  description: String
  language: String
  source: String
  domain: String
  hash: String
  osid: String
  license: License
  post: Post
  url: String
  authors(skip: Int, after: String, before: String, first: Int, last: Int): UserConnection

  # The ID of an object
  id: ID!
}

type Mutation {
  login(input: LoginMutationInput!): LoginMutationPayload
  loginToken(input: LoginTokenMutationInput!): LoginTokenMutationPayload
  logout(input: LogoutMutationInput!): LogoutMutationPayload
  resetPassword(input: ResetPasswordMutationInput!): ResetPasswordMutationPayload

  # Records the last enrollment accessed by the user
  updateLastAccess(input: UpdateLastAccessMutationInput!): UpdateLastAccessMutationPayload
  signIn(input: SignInMutationInput!): SignInMutationPayload
  signOut(input: SignOutMutationInput!): SignOutMutationPayload
  signUp(input: SignUpMutationInput!): SignUpMutationPayload
  createNewPost(input: CreateNewPostMutationInput!): CreateNewPostMutationPayload
  sendAccessedPost(input: SendAccessedPostMutationInput!): SendAccessedPostMutationPayload
  unvote(input: UnvoteMutationInput!): UnvoteMutationPayload
  vote(input: VoteMutationInput!): VoteMutationPayload
}

# An object with an ID
interface Node {
  # The id of the object.
  id: ID!
}

# Information about pagination in a connection.
type PageInfo {
  # When paginating forwards, are there more items?
  hasNextPage: Boolean!

  # When paginating backwards, are there more items?
  hasPreviousPage: Boolean!

  # When paginating backwards, the cursor to continue.
  startCursor: String

  # When paginating forwards, the cursor to continue.
  endCursor: String
}

type Post implements Node {
  material: Material
  votes: Int
  isVoted: Boolean

  # The ID of an object
  id: ID!
}

# A connection to a list of items.
type PostConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [PostEdge]
  count: Int
}

# An edge in a connection.
type PostEdge {
  # The item at the end of the edge
  node: Post

  # A cursor for use in pagination
  cursor: String!
}

type Query {
  auth: Auth
  viewer(hasUser: Boolean): User

  # Fetches an object given its ID
  node(
    # The ID of an object
    id: ID!
  ): Node
  system: System
}

input ResetPasswordMutationInput {
  token: String!
  password: String!
  clientMutationId: String
}

type ResetPasswordMutationPayload {
  jwtToken: String!
  user: User!
  clientMutationId: String
}

input SendAccessedPostMutationInput {
  materialGlobalId: ID
  clientMutationId: String
}

type SendAccessedPostMutationPayload {
  clientMutationId: String
}

input SignInMutationInput {
  email: String!
  password: String!
  clientMutationId: String
}

type SignInMutationPayload {
  jwtToken: String!
  user: User
  clientMutationId: String
}

input SignOutMutationInput {
  clientMutationId: String
}

type SignOutMutationPayload {
  clientMutationId: String
}

input SignUpMutationInput {
  name: String!
  email: String!
  document: String!
  cellphone: String!
  password: String!
  clientMutationId: String
}

type SignUpMutationPayload {
  clientMutationId: String
}

type System {
  users(skip: Int, after: String, before: String, first: Int, last: Int): UserConnection
  posts(type: String, page: Int, skip: Int, after: String, before: String, first: Int, last: Int): PostConnection
  constants: Constant
}

input UnvoteMutationInput {
  materialGlobalId: ID
  clientMutationId: String
}

type UnvoteMutationPayload {
  post: Post
  clientMutationId: String
}

input UpdateLastAccessMutationInput {
  id: ID
  clientMutationId: String
}

type UpdateLastAccessMutationPayload {
  enrollment: Enrollment
  clientMutationId: String
}

type User implements Node {
  email: String
  cpf: String
  password: String
  name: String
  lastname: String
  cellphone: String
  otherphone: String
  fullname: String
  enrollments(where: String, orderBy: String, skip: Int, after: String, before: String, first: Int, last: Int): EnrollmentConnection
  posts: PostConnection
  currentEnrollment: Enrollment
  isImpersonated: Boolean

  # The ID of an object
  id: ID!
}

# A connection to a list of items.
type UserConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [UserEdge]
}

# An edge in a connection.
type UserEdge {
  # The item at the end of the edge
  node: User

  # A cursor for use in pagination
  cursor: String!
}

input VoteMutationInput {
  materialGlobalId: ID
  clientMutationId: String
}

type VoteMutationPayload {
  post: Post
  clientMutationId: String
}
